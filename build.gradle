ext {
    // ajust as you see fit
    sonarProjects = subprojects
    sonarProjectPropertiesFile = new File(project.buildDir, 'sonar/sonar-project.properties')
}

apply plugin: 'java'
apply plugin: 'jacoco'

group = 'org.netpod'
version = '0.0.1-SNAPSHOT'

description = """"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    sonarRunner
    sonarProjectDependencies
}

repositories {
    mavenCentral()        
     maven { url "http://repo.maven.apache.org/maven2" }
     mavenLocal()
}

jacoco {
    // Gradle 1.11 ships with a Jacoco version that doesn't support Java 8
    toolVersion = "0.7.1.201405082137"
}

dependencies {
    sonarRunner(group: 'org.codehaus.sonar.runner', name: 'sonar-runner-dist', version: '2.4', ext: 'zip')

    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.3'
    compile group: 'org.apache.commons', name: 'commons-lang3', version:'3.1'
    compile group: 'javax.inject', name: 'javax.inject', version:'1'
    compile group: 'org.apache.httpcomponents', name: 'httpcore', version:'4.2.4'
    compile group: 'org.jadira.usertype', name: 'usertype.extended', version:'3.2.0.GA'
    compile group: 'com.oracle', name: 'ojdbc6', version:'11.2.0.3'
    compile group: 'ma.glasnost.orika', name: 'orika-core', version:'1.4.2'
    compile(group: 'io.dropwizard', name: 'dropwizard-core', version:'0.7.1') {
exclude(module: 'jetty-util')
    }
    compile group: 'com.yammer.dropwizard.testing', name: 'dropwizard-testing-integration', version:'0.0.8'
    compile(group: 'io.dropwizard', name: 'dropwizard-jackson', version:'0.7.1') {
exclude(module: 'jetty-util')
    }
    compile group: 'io.dropwizard', name: 'dropwizard-db', version:'0.7.1'
    compile(group: 'io.dropwizard', name: 'dropwizard-configuration', version:'0.7.1') {
exclude(module: 'jetty-util')
    }
    compile group: 'org.eclipse.jetty', name: 'jetty-util', version:'9.0.7.v20131107'

    compile('io.dropwizard.modules:dropwizard-java8:0.7.0-1') {
        transitive = true
    }

    compile('io.dropwizard.modules:dropwizard-java8-auth:0.7.0-1') {
        transitive = true
    }

    testCompile group: 'junit', name: 'junit', version:'4.11'
    testCompile group: 'junit-addons', name: 'junit-addons', version:'1.4'
    testCompile group: 'org.mockito', name: 'mockito-all', version:'1.9.5'
    testCompile(group: 'io.dropwizard', name: 'dropwizard-testing', version:'0.7.1') {
exclude(module: 'jetty-util')
    }
}

task unpackSonarRunner(type: Copy) {
    from { zipTree { configurations.sonarRunner.singleFile } }
    into "${project.buildDir}/sonar-runner"
    doLast {
        Properties properties = new Properties()
        properties['sonar.host.url'] = 'http://localhost:9000'
        properties['sonar.jdbc.url'] = 'jdbc:oracle:thin:@localhost:1521:orcl'
        properties['sonar.jdbc.driverClassName'] = 'oracle.jdbc.OracleDriver'
        properties['sonar.jdbc.username'] = 'sonar'
        properties['sonar.jdbc.password'] = 'sonar'
        
        new File(project.buildDir, 'sonar-runner/sonar-runner-2.4/conf/sonar-runner.properties').withWriter { writer ->
            properties.store(writer, "Sonar Runner Properties")
        }
    }
}
task createSonarProjectProperties() {
    //outputs.file sonarProjectPropertiesFile
}

createSonarProjectProperties << {
    Properties sonarProjectProps = new Properties()
    sonarProjectProps['sonar.projectKey'] = 'sample-common'
    sonarProjectProps['sonar.projectName'] = 'Sample Common'
    sonarProjectProps['sonar.projectVersion'] = project.version
    // due to classes in wrong packages
    // sonarProjectProps['sonar.skipPackageDesign'] = 'true'
    // Tells SonarQube to reuse existing reports for unit tests execution and coverage reports
    sonarProjectProps['sonar.dynamicAnalysis'] = 'reuseReports'
    // Tells SonarQube that the code coverage tool by unit tests is JaCoCo
    sonarProjectProps['sonar.java.coveragePlugin'] = 'jacoco'
    // Tells SonarQube where the integration tests code coverage report is
    // sonarProjectProps['sonar.jacoco.itReportPath'] = 'reports/jacoco/jacoco-it.exec'
    sonarProjectProps['sonar.java.coveragePlugin'] = 'jacoco'
    sonarProjectProps['sonar.sources'] = 'src/main/java'
    sonarProjectProps['sonar.core.codeCoveragePlugin'] = 'jacoco'
    sonarProjectProps['sonar.tests'] = 'src/test/java'
    sonarProjectProps['sonar.jacoco.reportPath'] = 'build/jacoco/test.exec'
    sonarProjectProps['sonar.junit.reportsPath'] = 'build/test-results'
    sonarProjectProps['sonar.binaries'] = 'build/classes/main,build/classes/test'
    sonarProjectProps['sonar.sourceEncoding'] = 'UTF-8'
    sonarProjectProps['sonar.showProfiling'] = 'true'
    
    sonarProjectPropertiesFile.parentFile.mkdirs()
    sonarProjectProps.store(sonarProjectPropertiesFile.newDataOutputStream(), 'Sonar Project Properties')
}

task sonar(type: Exec, dependsOn: [ unpackSonarRunner, createSonarProjectProperties, configurations.sonarProjectDependencies ]) {
    executable = "${project.buildDir}/sonar-runner/sonar-runner-2.4/bin/sonar-runner"
    args "-Dproject.settings=${sonarProjectPropertiesFile.absolutePath}"
    environment 'SONAR_RUNNER_OPTS',  '-Xmx2048m'
}
